#cloud-config

write_files:
  - content: |
      - name: install orchestrator
        hosts: 127.0.0.1
        pre_tasks:
          - name: install curl
            package: name=curl
          - name: install percona mysql repo
            shell: curl -O https://repo.percona.com/apt/percona-release_0.1-4.$(lsb_release -sc)_all.deb && dpkg -i percona-release_0.1-4.$(lsb_release -sc)_all.deb
            args:
              creates: /etc/apt/sources.list.d/percona-release.list
              executable: /bin/bash
              chdir: /tmp
          - name: refresh apt cache
            apt:
              update_cache: yes
        roles:
          - role: entercloudsuite.mysql
            mysql_packages:
              - percona-server-server-5.7
            mysql_users:
              - name: orchestrator
                host: '127.0.0.1'
                password: orchestrator
                priv: '*.*:ALL'
          - role: entercloudsuite.orchestrator
            orchestrator_version: 3.0.10
            orchestrator_mysql_user: orchestrator
            orchestrator_mysql_password: orchestrator
            orchestrator_mysql_topology_user: ${orchestrator_user}
            orchestrator_mysql_topology_password: ${orchestrator_password}
            orchestrator_read_only: false
            orchestrator_super_read_only: true
            orchestrator_mysql_compatible_version:
            orchestrator_listen_address: :${orchestrator_service_port}
            orchestrator_kv_consul_address: ${consul}:${consul_port}
            orchestrator_recover_master_cluster_filters: ["*"]
            orchestrator_recover_intermediate_master_cluster_filters: ["*"]
            orchestrator_master_failover_lost_instances_downtime_minutes: 1
            orchestrator_failure_detection_period_block_minutes: 1
            orchestrator_recovery_period_block_seconds: 30
            orchestrator_detect_cluster_domain_query:
            orchestrator_detect_datacenter_query:
            orchestrator_replication_lag_query:
            orchestrator_pseudo_gtid_pattern:
            orchestrator_detect_pseudo_gtid_query:
            orchestrator_authentication_method:
            orchestrator_http_auth_user:
            orchestrator_http_auth_password:
            orchestrator_url_prefix:
            orchestrator_raft_enabled: ${orchestrator_raft_enabled}
            orchestrator_raft_data_dir: "${orchestrator_raft_data_dir}"
            orchestrator_raft_bind: "{{ ansible_default_ipv4.address }}"
            orchestrator_raft_default_port: ${orchestrator_raft_default_port}
            orchestrator_raft_nodes: ${orchestrator_raft_nodes}
          - role: entercloudsuite.haproxy
            haproxy_user: ${orchestrator_user}
            haproxy_pass: ${orchestrator_password}
            haproxy_conf: |
              listen orchestrator
                  bind  *:${orchestrator_port}
                  mode tcp
                  option httpchk GET /api/leader-check
                  balance first
                  retries 1
                  timeout connect 1000
                  timeout check 300
                  timeout server 30s
                  timeout client 30s
                  default-server port 3000 fall 1 inter 1000 rise 1 downinter 1000 on-marked-down shutdown-sessions weight 10
                  server ${name}-0 ${name}-0.node.${consul_datacenter}.consul:${orchestrator_service_port} check
                  server ${name}-1 ${name}-1.node.${consul_datacenter}.consul:${orchestrator_service_port} check
                  server ${name}-2 ${name}-2.node.${consul_datacenter}.consul:${orchestrator_service_port} check
          - role: entercloudsuite.keepalived
            keepalived_options:
              - name: log-detail
            keepalived_vrrp_scripts:
              chk_haproxy:
                script: '/bin/pidof haproxy'
                weight: 100
                interval: 1

            keepalived_vrrp_instances:
              VI_1:
                interface: "{{ ansible_default_ipv4.interface }}"
                state: "{% if ${number} == 0 %}MASTER{% else %}BACKUP{% endif %}"
                priority: "{{ 110 - ${number}0 }}"
                virtual_router_id: ${orchestrator_virtual_router_id}

                authentication:
                  auth_type: PASS
                  auth_pass: '${orchestrator_password}'

                virtual_ipaddresses:
                  - '${orchestrator_ip}/${orchestrator_subnet} dev {{ ansible_default_ipv4.interface }} label {{ ansible_default_ipv4.interface }}:1'

                track_scripts:
                  - chk_haproxy
            when: ("${orchestrator_ip}" != "")

    path: /tmp/cloud/playbook.yml
    permissions: '0400'

  - content: |
      - src: entercloudsuite.orchestrator
        version: 1.0.2
      - src: entercloudsuite.mysql
        version: 1.0.0
      - src: entercloudsuite.haproxy
        version: 1.1.0
      - src: entercloudsuite.keepalived
        version: 1.0.2
    path: /tmp/cloud/requirements.yml
    permissions: '0400'

  - content: |
      ansible==2.5.1
      asn1crypto==0.23.0
      bcrypt==3.1.4
      cffi==1.11.2
      cryptography==2.1.3
      enum34==1.1.6
      idna==2.6
      ipaddress==1.0.18
      Jinja2==2.10
      MarkupSafe==1.0
      paramiko==2.4.0
      pyasn1==0.3.7
      pycparser==2.18
      pycrypto==2.6.1
      PyNaCl==1.2.0
      PyYAML==3.12
      six==1.11.0
      jmespath==0.9.3
    path: /tmp/cloud/requirements.txt
    permissions: '0400'

runcmd:
  - |
      bash <<'EOF'
      export COMPLETED=false
      while [ "$COMPLETED" == "false" ]; do
        (
          set -e errexit
          set -o pipefail
          # workaround https://github.com/ansible/ansible/issues/21562
          export HOME=/root
          cd /tmp/cloud
          rm -rf bin local share roles include lib || true
          dpkg-query -l libffi-dev || ( apt update -y && apt install libffi-dev -y )
          dpkg-query -l libssl-dev || ( apt update -y && apt install libssl-dev -y )
          test -e /usr/bin/python || ( apt update -y && apt install python-minimal -y )
          test -e /usr/bin/pip || ( apt update -y && apt install python-pip -y )
          test -e /usr/bin/virtualenv || ( apt update -y && apt install virtualenv -y )
          virtualenv .
          source bin/activate
          pip install -r requirements.txt
          mkdir roles || true
          ansible-galaxy install -f -p roles -r requirements.yml
          ansible-playbook -e ansible_python_interpreter=/usr/bin/python --connection=local playbook.yml
        ) >> /var/log/cloud-scripts.log 2>&1
        if [ $? == 0 ]; then
          COMPLETED=true
        fi
        sleep 1
      done
      EOF
