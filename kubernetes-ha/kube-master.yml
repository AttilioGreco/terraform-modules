#cloud-config

manage_etc_hosts: localhost

write_files:
  - content: |
      clusters:
        - name: automium-authn
          cluster:
            server: https://bastion.service.automium.consul:3001/v3/kubernetes/auth
            certificate-authority: /etc/kubernetes/automium/webhook-ca.crt
      current-context: webhook
      contexts:
        - context:
            cluster: automium-authn
          name: webhook
    path: /etc/kubernetes/automium/webhook.conf
    permission: 0600

  - content: |
       [Global]
       auth-url=${os_api_url}
       tenant-name=${os_tenant_name}
       username=${os_username}
       password=${os_password}
       region=${os_region}
       [BlockStorage]
       ignore-volume-az=true
    path: /etc/kubernetes/openstack/cloud.conf
    permission: 0600

  - content: |
       [Service]
       Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
       Environment="KUBELET_SYSTEM_PODS_ARGS=--pod-manifest-path=/etc/kubernetes/manifests --allow-privileged=true"
       Environment="KUBELET_NETWORK_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin"
       Environment="KUBELET_DNS_ARGS=--cluster-dns=10.96.0.10 --cluster-domain=cluster.local"
       Environment="KUBELET_AUTHZ_ARGS=--authorization-mode=Webhook --client-ca-file=/etc/kubernetes/pki/ca.crt"
       Environment="KUBELET_CADVISOR_ARGS=--cadvisor-port=0"
       Environment="KUBELET_CERTIFICATE_ARGS=--rotate-certificates=true --cert-dir=/var/lib/kubelet/pki"
       Environment="KUBELET_CLOUD_ARGS=--cloud-provider=openstack --cloud-config=/etc/kubernetes/openstack/cloud.conf"
       ExecStart=
       ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_SYSTEM_PODS_ARGS $KUBELET_NETWORK_ARGS $KUBELET_DNS_ARGS $KUBELET_AUTHZ_ARGS $KUBELET_CADVISOR_ARGS $KUBELET_CERTIFICATE_ARGS $KUBELET_CLOUD_ARGS $KUBELET_EXTRA_ARGS
    path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    permission: 0644

  - content: |
      apiVersion: kubeadm.k8s.io/v1alpha1
      kind: MasterConfiguration
      kubernetesVersion: $VERSION
      api:
        advertiseAddress: ens3
      etcd:
        endpoints:
        - http://etcd-server-0.node.automium.consul:2379
        - http://etcd-server-1.node.automium.consul:2379
        - http://etcd-server-2.node.automium.consul:2379
      apiServerExtraArgs:
        runtime-config: authentication.k8s.io/v1beta1=true
        authentication-token-webhook-config-file: /etc/kubernetes/automium/webhook.conf
        cloud-provider: openstack
        cloud-config: /etc/kubernetes/openstack/cloud.conf
      controllerManagerExtraArgs:
        cloud-provider: openstack
        cloud-config: /etc/kubernetes/openstack/cloud.conf
      apiServerExtraVolumes:
        - name: automium-conf
          hostPath: /etc/kubernetes/automium
          mountPath: /etc/kubernetes/automium
        - name: openstack-conf
          hostpath: /etc/kubernetes/openstack
          mountPath: /etc/kubernetes/openstack
      controllerManagerExtraVolumes:
        - name: openstack-conf
          hostpath: /etc/kubernetes/openstack
          mountPath: /etc/kubernetes/openstack
      token: ${kube-token}
      tokenTTL: 0s
      apiServerCertSANs:
      - ${public-ip}
    path: /root/kubeadm-config.yml
    permission: 0600

  - content: |
       #!/bin/bash
       systemctl daemon-reload
       systemctl restart kubelet
       mkdir -p /etc/kubernetes/automium && chmod 0700 /etc/kubernetes/automium
       curl -k -sS https://bastion.service.automium.consul:3001/.automium/ca > /etc/kubernetes/automium/webhook-ca.crt
       chmod 0600 /etc/kubernetes/automium/webhook-ca.crt
       cat /root/kubeadm-config.yml | VERSION="$(dpkg -l | grep kubelet | awk '{ print $3 }' | cut -d "-" -f 1)" envsubst > /root/kubeadm-config.yml
       kubeadm init --config /root/kubeadm-config.yml
       if [ $? -ne 0 ]; then
          sleep 5
          kubeadm init --config /root/kubeadm-config.yml
          if [ $? -ne 0 ]; then
             echo "Cannot bootstrap Kubernetes. Exiting"
             exit 1
          fi
       fi
       mkdir -p /root/.kube
       cp /etc/kubernetes/admin.conf /root/.kube/config
       chown root:root /root/.kube/config
       sleep 5
       sysctl -w net.bridge.bridge-nf-call-iptables=1
       sudo kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(sudo kubectl version | base64 | tr -d '\n')"
       sync
    path: /root/bootstrap.sh
    permission: 0755
    
runcmd:
  - wget -O /root/kubelet "https://swift.it-mil1.entercloudsuite.com/v1/KEY_1a68c22a99cd4e558054ede2c878929d/kube-binaries/kubelet"
  - chmod +x /root/kubelet
  - mv /root/kubelet /usr/bin/kubelet
  - bash /root/bootstrap.sh
  - rm /root/bootstrap.sh /root/kubeadm-config.yml

final_message: "Kubernetes master is ready to use"

